// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go
//
// Generated by this command:
//
//	mockgen -source=usecase.go -destination=./mocks/mock.go -typed
//

// Package mock_createclient is a generated GoMock package.
package mock_createclient

import (
	context "context"
	reflect "reflect"
	entity "synchronizationService/internal/entity"

	pgx "github.com/jackc/pgx/v5"
	pgconn "github.com/jackc/pgx/v5/pgconn"
	gomock "go.uber.org/mock/gomock"
)

// MocktxMock is a mock of txMock interface.
type MocktxMock struct {
	ctrl     *gomock.Controller
	recorder *MocktxMockMockRecorder
}

// MocktxMockMockRecorder is the mock recorder for MocktxMock.
type MocktxMockMockRecorder struct {
	mock *MocktxMock
}

// NewMocktxMock creates a new mock instance.
func NewMocktxMock(ctrl *gomock.Controller) *MocktxMock {
	mock := &MocktxMock{ctrl: ctrl}
	mock.recorder = &MocktxMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktxMock) EXPECT() *MocktxMockMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MocktxMock) Begin(ctx context.Context) (pgx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin", ctx)
	ret0, _ := ret[0].(pgx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MocktxMockMockRecorder) Begin(ctx any) *MocktxMockBeginCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MocktxMock)(nil).Begin), ctx)
	return &MocktxMockBeginCall{Call: call}
}

// MocktxMockBeginCall wrap *gomock.Call
type MocktxMockBeginCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MocktxMockBeginCall) Return(arg0 pgx.Tx, arg1 error) *MocktxMockBeginCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MocktxMockBeginCall) Do(f func(context.Context) (pgx.Tx, error)) *MocktxMockBeginCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MocktxMockBeginCall) DoAndReturn(f func(context.Context) (pgx.Tx, error)) *MocktxMockBeginCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Commit mocks base method.
func (m *MocktxMock) Commit(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MocktxMockMockRecorder) Commit(ctx any) *MocktxMockCommitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MocktxMock)(nil).Commit), ctx)
	return &MocktxMockCommitCall{Call: call}
}

// MocktxMockCommitCall wrap *gomock.Call
type MocktxMockCommitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MocktxMockCommitCall) Return(arg0 error) *MocktxMockCommitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MocktxMockCommitCall) Do(f func(context.Context) error) *MocktxMockCommitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MocktxMockCommitCall) DoAndReturn(f func(context.Context) error) *MocktxMockCommitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Conn mocks base method.
func (m *MocktxMock) Conn() *pgx.Conn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Conn")
	ret0, _ := ret[0].(*pgx.Conn)
	return ret0
}

// Conn indicates an expected call of Conn.
func (mr *MocktxMockMockRecorder) Conn() *MocktxMockConnCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Conn", reflect.TypeOf((*MocktxMock)(nil).Conn))
	return &MocktxMockConnCall{Call: call}
}

// MocktxMockConnCall wrap *gomock.Call
type MocktxMockConnCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MocktxMockConnCall) Return(arg0 *pgx.Conn) *MocktxMockConnCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MocktxMockConnCall) Do(f func() *pgx.Conn) *MocktxMockConnCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MocktxMockConnCall) DoAndReturn(f func() *pgx.Conn) *MocktxMockConnCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CopyFrom mocks base method.
func (m *MocktxMock) CopyFrom(ctx context.Context, tableName pgx.Identifier, columnNames []string, rowSrc pgx.CopyFromSource) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyFrom", ctx, tableName, columnNames, rowSrc)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyFrom indicates an expected call of CopyFrom.
func (mr *MocktxMockMockRecorder) CopyFrom(ctx, tableName, columnNames, rowSrc any) *MocktxMockCopyFromCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFrom", reflect.TypeOf((*MocktxMock)(nil).CopyFrom), ctx, tableName, columnNames, rowSrc)
	return &MocktxMockCopyFromCall{Call: call}
}

// MocktxMockCopyFromCall wrap *gomock.Call
type MocktxMockCopyFromCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MocktxMockCopyFromCall) Return(arg0 int64, arg1 error) *MocktxMockCopyFromCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MocktxMockCopyFromCall) Do(f func(context.Context, pgx.Identifier, []string, pgx.CopyFromSource) (int64, error)) *MocktxMockCopyFromCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MocktxMockCopyFromCall) DoAndReturn(f func(context.Context, pgx.Identifier, []string, pgx.CopyFromSource) (int64, error)) *MocktxMockCopyFromCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Exec mocks base method.
func (m *MocktxMock) Exec(ctx context.Context, sql string, arguments ...any) (pgconn.CommandTag, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, sql}
	for _, a := range arguments {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(pgconn.CommandTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MocktxMockMockRecorder) Exec(ctx, sql any, arguments ...any) *MocktxMockExecCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, sql}, arguments...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MocktxMock)(nil).Exec), varargs...)
	return &MocktxMockExecCall{Call: call}
}

// MocktxMockExecCall wrap *gomock.Call
type MocktxMockExecCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MocktxMockExecCall) Return(commandTag pgconn.CommandTag, err error) *MocktxMockExecCall {
	c.Call = c.Call.Return(commandTag, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MocktxMockExecCall) Do(f func(context.Context, string, ...any) (pgconn.CommandTag, error)) *MocktxMockExecCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MocktxMockExecCall) DoAndReturn(f func(context.Context, string, ...any) (pgconn.CommandTag, error)) *MocktxMockExecCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LargeObjects mocks base method.
func (m *MocktxMock) LargeObjects() pgx.LargeObjects {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LargeObjects")
	ret0, _ := ret[0].(pgx.LargeObjects)
	return ret0
}

// LargeObjects indicates an expected call of LargeObjects.
func (mr *MocktxMockMockRecorder) LargeObjects() *MocktxMockLargeObjectsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LargeObjects", reflect.TypeOf((*MocktxMock)(nil).LargeObjects))
	return &MocktxMockLargeObjectsCall{Call: call}
}

// MocktxMockLargeObjectsCall wrap *gomock.Call
type MocktxMockLargeObjectsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MocktxMockLargeObjectsCall) Return(arg0 pgx.LargeObjects) *MocktxMockLargeObjectsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MocktxMockLargeObjectsCall) Do(f func() pgx.LargeObjects) *MocktxMockLargeObjectsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MocktxMockLargeObjectsCall) DoAndReturn(f func() pgx.LargeObjects) *MocktxMockLargeObjectsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Prepare mocks base method.
func (m *MocktxMock) Prepare(ctx context.Context, name, sql string) (*pgconn.StatementDescription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prepare", ctx, name, sql)
	ret0, _ := ret[0].(*pgconn.StatementDescription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prepare indicates an expected call of Prepare.
func (mr *MocktxMockMockRecorder) Prepare(ctx, name, sql any) *MocktxMockPrepareCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MocktxMock)(nil).Prepare), ctx, name, sql)
	return &MocktxMockPrepareCall{Call: call}
}

// MocktxMockPrepareCall wrap *gomock.Call
type MocktxMockPrepareCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MocktxMockPrepareCall) Return(arg0 *pgconn.StatementDescription, arg1 error) *MocktxMockPrepareCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MocktxMockPrepareCall) Do(f func(context.Context, string, string) (*pgconn.StatementDescription, error)) *MocktxMockPrepareCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MocktxMockPrepareCall) DoAndReturn(f func(context.Context, string, string) (*pgconn.StatementDescription, error)) *MocktxMockPrepareCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Query mocks base method.
func (m *MocktxMock) Query(ctx context.Context, sql string, args ...any) (pgx.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, sql}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(pgx.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MocktxMockMockRecorder) Query(ctx, sql any, args ...any) *MocktxMockQueryCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, sql}, args...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MocktxMock)(nil).Query), varargs...)
	return &MocktxMockQueryCall{Call: call}
}

// MocktxMockQueryCall wrap *gomock.Call
type MocktxMockQueryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MocktxMockQueryCall) Return(arg0 pgx.Rows, arg1 error) *MocktxMockQueryCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MocktxMockQueryCall) Do(f func(context.Context, string, ...any) (pgx.Rows, error)) *MocktxMockQueryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MocktxMockQueryCall) DoAndReturn(f func(context.Context, string, ...any) (pgx.Rows, error)) *MocktxMockQueryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// QueryRow mocks base method.
func (m *MocktxMock) QueryRow(ctx context.Context, sql string, args ...any) pgx.Row {
	m.ctrl.T.Helper()
	varargs := []any{ctx, sql}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(pgx.Row)
	return ret0
}

// QueryRow indicates an expected call of QueryRow.
func (mr *MocktxMockMockRecorder) QueryRow(ctx, sql any, args ...any) *MocktxMockQueryRowCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, sql}, args...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MocktxMock)(nil).QueryRow), varargs...)
	return &MocktxMockQueryRowCall{Call: call}
}

// MocktxMockQueryRowCall wrap *gomock.Call
type MocktxMockQueryRowCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MocktxMockQueryRowCall) Return(arg0 pgx.Row) *MocktxMockQueryRowCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MocktxMockQueryRowCall) Do(f func(context.Context, string, ...any) pgx.Row) *MocktxMockQueryRowCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MocktxMockQueryRowCall) DoAndReturn(f func(context.Context, string, ...any) pgx.Row) *MocktxMockQueryRowCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Rollback mocks base method.
func (m *MocktxMock) Rollback(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MocktxMockMockRecorder) Rollback(ctx any) *MocktxMockRollbackCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MocktxMock)(nil).Rollback), ctx)
	return &MocktxMockRollbackCall{Call: call}
}

// MocktxMockRollbackCall wrap *gomock.Call
type MocktxMockRollbackCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MocktxMockRollbackCall) Return(arg0 error) *MocktxMockRollbackCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MocktxMockRollbackCall) Do(f func(context.Context) error) *MocktxMockRollbackCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MocktxMockRollbackCall) DoAndReturn(f func(context.Context) error) *MocktxMockRollbackCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SendBatch mocks base method.
func (m *MocktxMock) SendBatch(ctx context.Context, b *pgx.Batch) pgx.BatchResults {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendBatch", ctx, b)
	ret0, _ := ret[0].(pgx.BatchResults)
	return ret0
}

// SendBatch indicates an expected call of SendBatch.
func (mr *MocktxMockMockRecorder) SendBatch(ctx, b any) *MocktxMockSendBatchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendBatch", reflect.TypeOf((*MocktxMock)(nil).SendBatch), ctx, b)
	return &MocktxMockSendBatchCall{Call: call}
}

// MocktxMockSendBatchCall wrap *gomock.Call
type MocktxMockSendBatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MocktxMockSendBatchCall) Return(arg0 pgx.BatchResults) *MocktxMockSendBatchCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MocktxMockSendBatchCall) Do(f func(context.Context, *pgx.Batch) pgx.BatchResults) *MocktxMockSendBatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MocktxMockSendBatchCall) DoAndReturn(f func(context.Context, *pgx.Batch) pgx.BatchResults) *MocktxMockSendBatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MocktxManager is a mock of txManager interface.
type MocktxManager struct {
	ctrl     *gomock.Controller
	recorder *MocktxManagerMockRecorder
}

// MocktxManagerMockRecorder is the mock recorder for MocktxManager.
type MocktxManagerMockRecorder struct {
	mock *MocktxManager
}

// NewMocktxManager creates a new mock instance.
func NewMocktxManager(ctrl *gomock.Controller) *MocktxManager {
	mock := &MocktxManager{ctrl: ctrl}
	mock.recorder = &MocktxManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktxManager) EXPECT() *MocktxManagerMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MocktxManager) Begin(ctx context.Context) (pgx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin", ctx)
	ret0, _ := ret[0].(pgx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MocktxManagerMockRecorder) Begin(ctx any) *MocktxManagerBeginCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MocktxManager)(nil).Begin), ctx)
	return &MocktxManagerBeginCall{Call: call}
}

// MocktxManagerBeginCall wrap *gomock.Call
type MocktxManagerBeginCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MocktxManagerBeginCall) Return(arg0 pgx.Tx, arg1 error) *MocktxManagerBeginCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MocktxManagerBeginCall) Do(f func(context.Context) (pgx.Tx, error)) *MocktxManagerBeginCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MocktxManagerBeginCall) DoAndReturn(f func(context.Context) (pgx.Tx, error)) *MocktxManagerBeginCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockalgorithmStatusesRepo is a mock of algorithmStatusesRepo interface.
type MockalgorithmStatusesRepo struct {
	ctrl     *gomock.Controller
	recorder *MockalgorithmStatusesRepoMockRecorder
}

// MockalgorithmStatusesRepoMockRecorder is the mock recorder for MockalgorithmStatusesRepo.
type MockalgorithmStatusesRepoMockRecorder struct {
	mock *MockalgorithmStatusesRepo
}

// NewMockalgorithmStatusesRepo creates a new mock instance.
func NewMockalgorithmStatusesRepo(ctrl *gomock.Controller) *MockalgorithmStatusesRepo {
	mock := &MockalgorithmStatusesRepo{ctrl: ctrl}
	mock.recorder = &MockalgorithmStatusesRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockalgorithmStatusesRepo) EXPECT() *MockalgorithmStatusesRepoMockRecorder {
	return m.recorder
}

// CreateAlgorithmWithTx mocks base method.
func (m *MockalgorithmStatusesRepo) CreateAlgorithmWithTx(ctx context.Context, tx pgx.Tx, algorithm *entity.AlgorithmStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAlgorithmWithTx", ctx, tx, algorithm)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAlgorithmWithTx indicates an expected call of CreateAlgorithmWithTx.
func (mr *MockalgorithmStatusesRepoMockRecorder) CreateAlgorithmWithTx(ctx, tx, algorithm any) *MockalgorithmStatusesRepoCreateAlgorithmWithTxCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAlgorithmWithTx", reflect.TypeOf((*MockalgorithmStatusesRepo)(nil).CreateAlgorithmWithTx), ctx, tx, algorithm)
	return &MockalgorithmStatusesRepoCreateAlgorithmWithTxCall{Call: call}
}

// MockalgorithmStatusesRepoCreateAlgorithmWithTxCall wrap *gomock.Call
type MockalgorithmStatusesRepoCreateAlgorithmWithTxCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockalgorithmStatusesRepoCreateAlgorithmWithTxCall) Return(arg0 error) *MockalgorithmStatusesRepoCreateAlgorithmWithTxCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockalgorithmStatusesRepoCreateAlgorithmWithTxCall) Do(f func(context.Context, pgx.Tx, *entity.AlgorithmStatus) error) *MockalgorithmStatusesRepoCreateAlgorithmWithTxCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockalgorithmStatusesRepoCreateAlgorithmWithTxCall) DoAndReturn(f func(context.Context, pgx.Tx, *entity.AlgorithmStatus) error) *MockalgorithmStatusesRepoCreateAlgorithmWithTxCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockclientsRepo is a mock of clientsRepo interface.
type MockclientsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockclientsRepoMockRecorder
}

// MockclientsRepoMockRecorder is the mock recorder for MockclientsRepo.
type MockclientsRepoMockRecorder struct {
	mock *MockclientsRepo
}

// NewMockclientsRepo creates a new mock instance.
func NewMockclientsRepo(ctrl *gomock.Controller) *MockclientsRepo {
	mock := &MockclientsRepo{ctrl: ctrl}
	mock.recorder = &MockclientsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockclientsRepo) EXPECT() *MockclientsRepoMockRecorder {
	return m.recorder
}

// AddClientWithTx mocks base method.
func (m *MockclientsRepo) AddClientWithTx(ctx context.Context, tx pgx.Tx, client *entity.Client) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddClientWithTx", ctx, tx, client)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddClientWithTx indicates an expected call of AddClientWithTx.
func (mr *MockclientsRepoMockRecorder) AddClientWithTx(ctx, tx, client any) *MockclientsRepoAddClientWithTxCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClientWithTx", reflect.TypeOf((*MockclientsRepo)(nil).AddClientWithTx), ctx, tx, client)
	return &MockclientsRepoAddClientWithTxCall{Call: call}
}

// MockclientsRepoAddClientWithTxCall wrap *gomock.Call
type MockclientsRepoAddClientWithTxCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockclientsRepoAddClientWithTxCall) Return(arg0 int64, arg1 error) *MockclientsRepoAddClientWithTxCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockclientsRepoAddClientWithTxCall) Do(f func(context.Context, pgx.Tx, *entity.Client) (int64, error)) *MockclientsRepoAddClientWithTxCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockclientsRepoAddClientWithTxCall) DoAndReturn(f func(context.Context, pgx.Tx, *entity.Client) (int64, error)) *MockclientsRepoAddClientWithTxCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
