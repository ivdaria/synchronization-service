// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go
//
// Generated by this command:
//
//	mockgen -source=usecase.go -destination=./mocks/mock.go -typed
//

// Package mock_updateclient is a generated GoMock package.
package mock_updateclient

import (
	context "context"
	reflect "reflect"
	entity "synchronizationService/internal/entity"

	gomock "go.uber.org/mock/gomock"
)

// MockclientsRepo is a mock of clientsRepo interface.
type MockclientsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockclientsRepoMockRecorder
}

// MockclientsRepoMockRecorder is the mock recorder for MockclientsRepo.
type MockclientsRepoMockRecorder struct {
	mock *MockclientsRepo
}

// NewMockclientsRepo creates a new mock instance.
func NewMockclientsRepo(ctrl *gomock.Controller) *MockclientsRepo {
	mock := &MockclientsRepo{ctrl: ctrl}
	mock.recorder = &MockclientsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockclientsRepo) EXPECT() *MockclientsRepoMockRecorder {
	return m.recorder
}

// UpdateClient mocks base method.
func (m *MockclientsRepo) UpdateClient(ctx context.Context, client *entity.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClient", ctx, client)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClient indicates an expected call of UpdateClient.
func (mr *MockclientsRepoMockRecorder) UpdateClient(ctx, client any) *MockclientsRepoUpdateClientCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClient", reflect.TypeOf((*MockclientsRepo)(nil).UpdateClient), ctx, client)
	return &MockclientsRepoUpdateClientCall{Call: call}
}

// MockclientsRepoUpdateClientCall wrap *gomock.Call
type MockclientsRepoUpdateClientCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockclientsRepoUpdateClientCall) Return(arg0 error) *MockclientsRepoUpdateClientCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockclientsRepoUpdateClientCall) Do(f func(context.Context, *entity.Client) error) *MockclientsRepoUpdateClientCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockclientsRepoUpdateClientCall) DoAndReturn(f func(context.Context, *entity.Client) error) *MockclientsRepoUpdateClientCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
